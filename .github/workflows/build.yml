name: Build

on:
    workflow_call:
        inputs:
            commit:
                required: true
                type: string
            signed:
                required: false
                type: boolean
                default: false

jobs:
    pack:
        strategy:
            matrix:
                build:
                    - os: macos-14
                      target: aarch64-apple-darwin
                      artifact: sqlynx_pack_macos
                    - os: ubuntu-22.04
                      target: x86_64-unknown-linux-gnu
                      artifact: sqlynx_pack_linux
        name: Pack / ${{ matrix.build.os }}
        runs-on: ${{ matrix.build.os }}
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: 'recursive'
                  fetch-depth: 0
                  ref: ${{ github.event.inputs.commit || github.sha }}

            - name: Setup cargo cache
              uses: actions/cache@v4
              with:
                  path: |
                    ~/.cargo/bin/
                    ~/.cargo/registry/index/
                    ~/.cargo/registry/cache/
                    ~/.cargo/git/db/
                    target/
                  key: cargo-macos-${{ matrix.build.target }}-${{ hashFiles('Cargo.lock') }}
                  restore-keys: |
                    cargo-macos-${{ matrix.build.target }}-${{ hashFiles('Cargo.lock') }}
                    cargo-macos-${{ matrix.build.target }}-

            - name: Setup rust
              uses: ./.github/actions/setup-rust
              with:
                os: ${{ matrix.build.os }}

            - name: Build sqlynx-pack
              shell: bash
              run: |
                    cargo build --target=${{ matrix.build.target }} -p sqlynx-pack --release

            - uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.build.artifact }}
                  path: ${{ github.workspace }}/target/${{ matrix.build.target }}/release/*sqlynx*
                  retention-days: 1

    core_wasm:
        strategy:
            matrix:
                build_type: ['o0', 'o3']

        name: Core / WASM / ${{ matrix.build_type }}
        runs-on: ubuntu-22.04
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: 'recursive'
                  fetch-depth: 0
                  ref: ${{ github.event.inputs.commit || github.sha }}

            - name: Setup flatc
              uses: ./.github/actions/setup-flatc
            - name: Setup wasi-sdk
              uses: ./.github/actions/setup-wasi-sdk
            - name: Setup wabt
              uses: ./.github/actions/setup-wabt
            - name: Setup binaryen
              uses: ./.github/actions/setup-binaryen

            - name: Generate Flatbuffer files
              shell: bash
              run: ./scripts/generate_flatbuf.sh

            - name: Build WASM module
              shell: bash
              env:
                  BINARYEN_BIN: /opt/binaryen/bin
                  WABT_BIN: /opt/wabt/bin
                  WASI_SDK_PREFIX: /opt/wasi
                  WASI_SYSROOT: /opt/wasi/share/wasi-sysroot
                  WASI_CMAKE_TOOLCHAIN: /opt/wasi/share/cmake/wasi-sdk.cmake
              run: |
                  ./scripts/build_parser_wasm.sh ${{ matrix.build_type }}

            - uses: actions/upload-artifact@v4
              with:
                  name: sqlynx_core_wasm_${{ matrix.build_type }}
                  path: ${{ github.workspace }}/packages/sqlynx-core/build/wasm/${{ matrix.build_type }}/sqlynx.wasm
                  retention-days: 1

    core_native:
        strategy:
            matrix:
                build_type: ['o0', 'o2']

        name: Core / Native / ${{ matrix.build_type }}
        runs-on: ubuntu-22.04
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: 'recursive'
                  fetch-depth: 0
                  ref: ${{ github.event.inputs.sha || github.sha }}

            - name: Setup llvm
              uses: ./.github/actions/setup-llvm
            - name: Setup flatc
              uses: ./.github/actions/setup-flatc

            - name: Generate Flatbuffer files
              shell: bash
              run: ./scripts/generate_flatbuf.sh

            - name: Compile library
              shell: bash
              env:
                  SQLYNX_SOURCE_DIR: ${{ github.workspace }}/packages/sqlynx-core
                  SQLYNX_BUILD_DIR: ${{ github.workspace }}/packages/sqlynx-core/build/native/${{ matrix.build_type }}
              run: |
                  cmake -S ${SQLYNX_SOURCE_DIR} -B ${SQLYNX_BUILD_DIR} \
                  -DCMAKE_C_COMPILER=${{env.LLVM_PATH}}/bin/clang \
                  -DCMAKE_CXX_COMPILER=${{env.LLVM_PATH}}/bin/clang++ \
                  -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                  -DCMAKE_EXPORT_COMPILE_COMMANDS=1 \
                  -DCODE_COVERAGE=1
                  ln -sf ${SQLYNX_BUILD_DIR}/compile_commands.json ${SQLYNX_SOURCE_DIR}/compile_commands.json
                  cmake --build ${SQLYNX_BUILD_DIR} --parallel $(nproc --all)

            - name: Test library
              shell: bash
              env:
                  SQLYNX_SOURCE_DIR: ${{ github.workspace }}/packages/sqlynx
                  SQLYNX_BUILD_DIR: ${{ github.workspace }}/packages/sqlynx-core/build/native/${{ matrix.build_type }}
              run: |
                  ${SQLYNX_BUILD_DIR}/tester --source ${SQLYNX_SOURCE_DIR}

            - name: Run pipeline benchmarks
              if: matrix.build_type == 'o2'
              shell: bash
              env:
                  SQLYNX_SOURCE_DIR: ${{ github.workspace }}/packages/sqlynx
                  SQLYNX_BUILD_DIR: ${{ github.workspace }}/packages/sqlynx-core/build/native/${{ matrix.build_type }}
              run: |
                  ${SQLYNX_BUILD_DIR}/benchmark_pipeline

            - name: Run layout benchmarks
              if: matrix.build_type == 'o2'
              shell: bash
              env:
                  SQLYNX_SOURCE_DIR: ${{ github.workspace }}/packages/sqlynx
                  SQLYNX_BUILD_DIR: ${{ github.workspace }}/packages/sqlynx-core/build/native/${{ matrix.build_type }}
              run: |
                  ${SQLYNX_BUILD_DIR}/benchmark_layout

            - name: Merge coverage data
              shell: bash
              env:
                  SQLYNX_COVERAGE_DIR: ${{ github.workspace }}/packages/sqlynx-core/build/coverage
              run: |
                  mkdir -p ${SQLYNX_COVERAGE_DIR}
                  ${{env.LLVM_PATH}}/bin/llvm-profdata merge -output=${SQLYNX_COVERAGE_DIR}/coverage.prof -instr default.profraw

            - name: Build coverage report
              shell: bash
              env:
                  SQLYNX_BUILD_DIR: ${{ github.workspace }}/packages/sqlynx-core/build/native/${{ matrix.build_type }}
                  SQLYNX_COVERAGE_DIR: ${{ github.workspace }}/packages/sqlynx-core/build/coverage
              run: |
                  ${{env.LLVM_PATH}}/bin/llvm-cov export \
                  --instr-profile ${SQLYNX_COVERAGE_DIR}/coverage.prof \
                  --format lcov \
                  --ignore-filename-regex='.*/build/native/${{ matrix.build_type }}/.*' \
                  --ignore-filename-regex='.*/utf8proc/.*' \
                  --ignore-filename-regex='.*/proto/proto_generated.h' \
                  --ignore-filename-regex='.*/.*\.list' \
                  ${SQLYNX_BUILD_DIR}/tester > ${SQLYNX_COVERAGE_DIR}/lcov.info

            - uses: actions/upload-artifact@v4
              with:
                  name: sqlynx_coverage_native_${{ matrix.build_type }}
                  path: ${{ github.workspace }}/packages/sqlynx-core/build/coverage/lcov.info
                  retention-days: 1

    core:
        name: Core
        runs-on: ubuntu-22.04
        needs:
            - core_wasm
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: 'recursive'
                  fetch-depth: 0
                  ref: ${{ github.event.inputs.sha || github.sha }}

            - uses: actions/download-artifact@v4
              with:
                  name: sqlynx_core_wasm_o3
                  path: ${{ github.workspace }}/packages/sqlynx-core/build/wasm/o3/

            - name: Setup flatc
              uses: ./.github/actions/setup-flatc

            - name: Generate Flatbuffer files
              shell: bash
              run: ./scripts/generate_flatbuf.sh

            - name: Install npm dependencies
              shell: bash
              run: |
                  yarn install --frozen-lockfile

            - name: Build @ankoh/sqlynx-core
              shell: bash
              run: |
                  yarn workspace @ankoh/sqlynx-core build:o3

            - name: Test @ankoh/sqlynx-core
              shell: bash
              run: |
                  yarn workspace @ankoh/sqlynx-core test:coverage

            - uses: actions/upload-artifact@v4
              with:
                  name: sqlynx_core
                  path: ${{ github.workspace }}/packages/sqlynx-core-api/dist
                  retention-days: 1

            - uses: actions/upload-artifact@v4
              with:
                  name: sqlynx_coverage_js
                  path: ${{ github.workspace }}/packages/sqlynx-core-api/coverage/lcov.info
                  retention-days: 1

    pwa:
        name: App / Web / ${{ matrix.build.name }}
        runs-on: ubuntu-22.04
        strategy:
            fail-fast: true
            matrix:
                build:
                    - name: Relocatable
                      target: build:reloc
                      output: reloc
                      artifact: sqlynx_pwa_reloc
                    - name: Pages
                      target: build:pages
                      output: pages
                      artifact: sqlynx_pwa_pages
        needs:
            - core
            - pack
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: 'recursive'
                  fetch-depth: 0
                  ref: ${{ github.event.inputs.sha || github.sha }}

            - uses: actions/download-artifact@v4
              with:
                  name: sqlynx_pack_linux
                  path: ${{ github.workspace }}/.bin/

            - uses: actions/download-artifact@v4
              with:
                  name: sqlynx_core
                  path: ${{ github.workspace }}/packages/sqlynx-core-api/dist

            - name: Freeze SQLynx version
              shell: bash
              run: |
                    chmod +x ./.bin/sqlynx-pack
                    ./.bin/sqlynx-pack freeze

            - name: Install npm dependencies
              shell: bash
              run: |
                  yarn install --frozen-lockfile

            - name: Build Hyper Service protobuf library
              shell: bash
              run: |
                    ./node_modules/.bin/buf generate
                    yarn workspace @ankoh/sqlynx-pb build

            - name: Run tests
              shell: bash
              run: |
                    yarn workspace @ankoh/sqlynx-app test

            - name: Build web app
              shell: bash
              env:
                SQLYNX_APP_URL: "https://sqlynx.app"
              run: |
                    yarn workspace @ankoh/sqlynx-app ${{ matrix.build.target }}

            - uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.build.artifact }}
                  path: ${{ github.workspace }}/packages/sqlynx-app/build/${{ matrix.build.output }}
                  retention-days: 1

    native:
        name: App / MacOS
        runs-on: macos-14
        needs:
            - pwa
            - pack
        steps:

            - uses: actions/checkout@v4
              with:
                submodules: 'recursive'
                fetch-depth: 0
                ref: ${{ github.event.inputs.sha || github.sha }}

            - uses: actions/download-artifact@v4
              with:
                name: sqlynx_pack_macos
                path: ${{ github.workspace }}/.bin/

            - uses: actions/download-artifact@v4
              with:
                name: sqlynx_core
                path: ${{ github.workspace }}/packages/sqlynx-core-api/dist

            - uses: actions/download-artifact@v4
              with:
                name: sqlynx_pwa_reloc
                path: ${{ github.workspace }}/packages/sqlynx-app/build/reloc

            - name: Setup cargo cache
              uses: actions/cache@v4
              with:
                  path: |
                    ~/.cargo/bin/
                    ~/.cargo/registry/index/
                    ~/.cargo/registry/cache/
                    ~/.cargo/git/db/
                    target/
                  key: cargo-macos-${{ hashFiles('Cargo.lock') }}
                  restore-keys: |
                    cargo-macos-universal-${{ hashFiles('Cargo.lock') }}
                    cargo-macos-universal-

            - name: Setup protoc
              uses: ./.github/actions/setup-protoc
              with:
                os: macos-14
            - name: Setup rust
              uses: ./.github/actions/setup-rust
              with:
                os: macos-14
            - name: Setup tauri
              uses: ./.github/actions/setup-tauri

            - name: Install npm dependencies
              run: |
                    yarn install --frozen-lockfile

            - name: Freeze SQLynx version
              shell: bash
              run: |
                    chmod +x ./.bin/sqlynx-pack
                    ./.bin/sqlynx-pack freeze

            - name: Run tests
              run: |
                    cargo test

            - name: Build native app for macOS without code signing
              if: ${{ !inputs.signed }}
              run: |
                    yarn run build:native:mac

            - name: Build native app for macOS with code signing
              if: ${{ inputs.signed }}
              env:
                APPLE_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
                APPLE_CERTIFICATE: ${{ secrets.MACOS_DEVELOPER_ID_APPLICATION_BASE64 }}
                APPLE_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_DEVELOPER_ID_APPLICATION_SECRET }}
                APPLE_API_ISSUER: ${{ secrets.MACOS_STORE_ISSUER_ID }}
                APPLE_API_KEY: ${{ secrets.MACOS_STORE_KEY_ID }}
                APPLE_API_KEY_PATH: ${{ github.workspace }}/apple_store.key
              run: |
                    echo "${{ secrets.MACOS_STORE_KEY }}" > ${{ env.APPLE_API_KEY_PATH }}
                    yarn run build:native:mac

            - name: Package native app updates
              if: ${{ inputs.signed }}
              env:
                APPLE_SIGNING_IDENTITY: ${{ secrets.MACOS_SIGNING_IDENTITY }}
                APPLE_CERTIFICATE: ${{ secrets.MACOS_DEVELOPER_ID_APPLICATION_BASE64 }}
                APPLE_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_DEVELOPER_ID_APPLICATION_SECRET }}
                APPLE_API_ISSUER: ${{ secrets.MACOS_STORE_ISSUER_ID }}
                APPLE_API_KEY: ${{ secrets.MACOS_STORE_KEY_ID }}
                APPLE_API_KEY_PATH: ${{ github.workspace }}/apple_store.key
                TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.RELEASE_SIGNING_KEY_BASE64 }}
                TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.RELEASE_SIGNING_KEY_PASSWORD }}
              run: |
                    echo "${{ secrets.MACOS_STORE_KEY }}" > ${{ env.APPLE_API_KEY_PATH }}
                    yarn run package:native:updates:mac

            - uses: actions/upload-artifact@v4
              with:
                  name: sqlynx_native_macos_dmg
                  path: ${{ github.workspace }}/target/universal-apple-darwin/release/bundle/dmg/
                  retention-days: 1

            - uses: actions/upload-artifact@v4
              if: ${{ inputs.signed }}
              with:
                  name: sqlynx_native_macos_update
                  path: ${{ github.workspace }}/target/release/bundle/macos/
                  retention-days: 1

