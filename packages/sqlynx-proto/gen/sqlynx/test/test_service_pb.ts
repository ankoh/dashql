// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file sqlynx/test/test_service.proto (package sqlynx.test, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message sqlynx.test.TestUnaryRequest
 */
export class TestUnaryRequest extends Message<TestUnaryRequest> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<TestUnaryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sqlynx.test.TestUnaryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestUnaryRequest {
    return new TestUnaryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestUnaryRequest {
    return new TestUnaryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestUnaryRequest {
    return new TestUnaryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TestUnaryRequest | PlainMessage<TestUnaryRequest> | undefined, b: TestUnaryRequest | PlainMessage<TestUnaryRequest> | undefined): boolean {
    return proto3.util.equals(TestUnaryRequest, a, b);
  }
}

/**
 * @generated from message sqlynx.test.TestUnaryResponse
 */
export class TestUnaryResponse extends Message<TestUnaryResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<TestUnaryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sqlynx.test.TestUnaryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestUnaryResponse {
    return new TestUnaryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestUnaryResponse {
    return new TestUnaryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestUnaryResponse {
    return new TestUnaryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TestUnaryResponse | PlainMessage<TestUnaryResponse> | undefined, b: TestUnaryResponse | PlainMessage<TestUnaryResponse> | undefined): boolean {
    return proto3.util.equals(TestUnaryResponse, a, b);
  }
}

/**
 * @generated from message sqlynx.test.TestServerStreamingRequest
 */
export class TestServerStreamingRequest extends Message<TestServerStreamingRequest> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<TestServerStreamingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sqlynx.test.TestServerStreamingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestServerStreamingRequest {
    return new TestServerStreamingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestServerStreamingRequest {
    return new TestServerStreamingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestServerStreamingRequest {
    return new TestServerStreamingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TestServerStreamingRequest | PlainMessage<TestServerStreamingRequest> | undefined, b: TestServerStreamingRequest | PlainMessage<TestServerStreamingRequest> | undefined): boolean {
    return proto3.util.equals(TestServerStreamingRequest, a, b);
  }
}

/**
 * @generated from message sqlynx.test.TestServerStreamingResponse
 */
export class TestServerStreamingResponse extends Message<TestServerStreamingResponse> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<TestServerStreamingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sqlynx.test.TestServerStreamingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestServerStreamingResponse {
    return new TestServerStreamingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestServerStreamingResponse {
    return new TestServerStreamingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestServerStreamingResponse {
    return new TestServerStreamingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TestServerStreamingResponse | PlainMessage<TestServerStreamingResponse> | undefined, b: TestServerStreamingResponse | PlainMessage<TestServerStreamingResponse> | undefined): boolean {
    return proto3.util.equals(TestServerStreamingResponse, a, b);
  }
}

