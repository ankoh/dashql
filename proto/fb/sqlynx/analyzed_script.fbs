include "sqlynx/sql_enums.fbs";

namespace sqlynx.proto;

table DatabaseDeclaration {
    // The unified database id across all catalog entries
    catalog_database_id: uint32;
    // The column name
    database_name: string;
}

table SchemaDeclaration {
    // The unified database id across all catalog entries
    catalog_database_id: uint32;
    // The unified schema id across all catalog entries
    catalog_schema_id: uint32;
    // The schema name
    schema_name: string;
}

table QualifiedTableName {
    // The node id
    ast_node_id: uint32;
    // The name of the database that owns the table (if any)
    database_name: string;
    // The name of the schema that holds the table (if any)
    schema_name: string;
    // The table name, always a table for now
    table_name: string;
}

table QualifiedColumnName {
    // The node id
    ast_node_id: uint32;
    // The table alias, if exists
    table_alias: string;
    // The column name
    column_name: string;
}

table TableColumn {
    // The id of the AST node that created this column declaration
    ast_node_id: uint32;
    // The name of the column that is referenced
    column_name: string;
}

table Table {
    // The id of the table in the catalog
    catalog_table_id: uint64;
    // The unified database id across all catalog entries
    catalog_database_id: uint32;
    // The unified schema id across all catalog entries
    catalog_schema_id: uint32;
    // The id of the AST node that created this table declaration.
    ast_node_id: uint32 ;
    // The id of the statement that created the table declaration
    ast_statement_id: uint32;
    // The root of the scope where this table reference is live
    ast_scope_root: uint32;
    // The name of the table that is declared by the node
    table_name: QualifiedTableName;
    // The table columns
    table_columns: [TableColumn];
}

table TableReference {
    // The id of the AST node that created this table reference
    ast_node_id: uint32;
    // The id of the statement that contains the table reference
    ast_statement_id: uint32;
    // The root of the scope where this table reference is live
    ast_scope_root: uint32;
    // The name of the table that is referenced
    table_name: QualifiedTableName;
    // The alias name
    alias_name: string;
    // The resolved unified database id across all catalog entries
    resolved_catalog_database_id: uint32;
    // The resolved unified schema id across all catalog entries
    resolved_catalog_schema_id: uint32;
    // The id of the table that is referenced.
    // <uint32, uint32> that may point into the catalog.
    // Referencing a local table only if the upper u32 equals the scripts external id.
    resolved_catalog_table_id: uint64;
}

table ColumnReference {
    // The id of the AST node that created this column reference
    ast_node_id: uint32;
    // The id of the statement that contains the column reference
    ast_statement_id: uint32;
    // The root of the scope where this table reference is live
    ast_scope_root: uint32;
    // The column name
    column_name: QualifiedColumnName;
    // The unified database id across all catalog entries
    resolved_catalog_database_id: uint32;
    // The unified schema id across all catalog entries
    resolved_catalog_schema_id: uint32;
    // The external object id of the table that is referenced.
    // <uint32, uint32> that may point into the catalog.
    resolved_catalog_table_id: uint64;
    // The id of the column that is referenced.
    // This is just the index in the resolved table.
    resolved_column_id: uint32;
}

struct QueryGraphEdge {
    /// The id of the AST node that created this graph node
    ast_node_id: uint32;
    /// The begin of the nodes
    nodes_begin: uint32;
    /// The number of nodes on the left side
    node_count_left: uint16;
    /// The set id of nodes on the right side
    node_count_right: uint16;
    /// The expression operator
    expression_operator: ExpressionOperator;
}

struct QueryGraphEdgeNode {
    /// The id of the column reference
    column_reference_id: uint32;
}

table AnalyzedScript {
    // The external id that the user specified for this catalog entry
    catalog_entry_id: uint32;
    // The databases
    databases: [DatabaseDeclaration];
    // The schemas
    schemas: [SchemaDeclaration];
    // The local tables
    tables: [Table];
    // The table references in the statement
    table_references: [TableReference];
    // The column references in the statement
    column_references: [ColumnReference];
    /// The query graph edges
    graph_edges: [QueryGraphEdge];
    /// The query graph edge nodes
    graph_edge_nodes: [QueryGraphEdgeNode];
}
