namespace sqlynx.proto;

// ----------------------------------------------------------------------------

/// The type of an entry in the catalog.
/// The user either inserted a schema script or a descriptor flatbuffer.
enum CatalogEntryType: uint8 {
    SCRIPT = 0,
    DESCRIPTOR_POOL = 1,
}

/// A catalog entry.
/// Catlaog entries are ordered by rank and contain an external id.
table CatalogEntry {
    external_id: uint32;
    entry_type: CatalogEntryType;
    rank: uint32;
    schemas: [SchemaDescriptor];
}

/// A collection of catalog entries
table CatalogEntries {
    entries: [CatalogEntry];
}

/// A descriptor for a single schema
table SchemaDescriptor {
    database_name: string;
    schema_name: string;
    tables: [SchemaTable];
}

/// A descriptor for a table within a schema
table SchemaTable {
    table_id: uint32;
    table_name: string;
    columns: [SchemaTableColumn];
}

/// A descriptor for a column within a table
table SchemaTableColumn {
    column_name: string;
}

// ----------------------------------------------------------------------------

/// Our API supports returning a "flattened" catalog where entries from the same schema are merged.
/// The data is structured in a way that enables an efficient "virtualized" hierarchical schema tree renderer.
/// - A renderer can determine the virtual boundaries in logarithmic time.
/// - A renderer can lazily decode utf8 strings through the dictionary.
table FlatCatalog {
    /// The version indicates if the frontend has to refresh the UI due to a catalog change.
    catalog_version: uint64;
    /// The name dictionary allows us to implement flat catalog entries as structs
    name_dictionary: [string];

    /// The flattened database array
    databases: [FlatCatalogEntry];
    /// The flattened schema array
    schemas: [FlatCatalogEntry];
    /// The flattened table array
    tables: [FlatCatalogEntry];
    /// The flattened column array
    columns: [FlatCatalogEntry];
}


/// A descriptor for a catalog element
struct FlatCatalogEntry {
    entry_id: uint32;
    name_id: uint32;
    child_begin: uint32;
    child_count: uint32;
}
