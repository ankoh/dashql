include "dashql/sql_enums.fbs";

namespace dashql.buffers;

table DatabaseDeclaration {
    // The unified database id across all catalog entries
    catalog_database_id: uint32;
    // The column name
    database_name: string;
}

table SchemaDeclaration {
    // The unified database id across all catalog entries
    catalog_database_id: uint32;
    // The unified schema id across all catalog entries
    catalog_schema_id: uint32;
    // The schema name
    schema_name: string;
}

table QualifiedTableName {
    // The node id
    ast_node_id: uint32;
    // The name of the database that owns the table (if any)
    database_name: string;
    // The name of the schema that holds the table (if any)
    schema_name: string;
    // The table name, always a table for now
    table_name: string;
}

table QualifiedColumnName {
    // The node id
    ast_node_id: uint32;
    // The table alias, if exists
    table_alias: string;
    // The column name
    column_name: string;
}

table TableColumn {
    // The id of the AST node that created this column declaration
    ast_node_id: uint32;
    // The name of the column that is referenced
    column_name: string;
}

table Table {
    // The id of the table in the catalog
    catalog_table_id: uint64;
    // The unified database id across all catalog entries
    catalog_database_id: uint32;
    // The unified schema id across all catalog entries
    catalog_schema_id: uint32;
    // The id of the AST node that created this table declaration.
    ast_node_id: uint32 ;
    // The id of the statement that created the table declaration
    ast_statement_id: uint32;
    // The root of the scope where this table reference is live
    ast_scope_root: uint32;
    // The name of the table that is declared by the node
    table_name: QualifiedTableName;
    // The table columns
    table_columns: [TableColumn];
}

table ResolvedRelationExpression {
    // The name of the table that is referenced
    table_name: QualifiedTableName;
    // The resolved unified database id across all catalog entries
    catalog_database_id: uint32;
    // The resolved unified schema id across all catalog entries
    catalog_schema_id: uint32;
    // The id of the table that is referenced.
    // <uint32, uint32> that may point into the catalog.
    // Referencing a local table only if the upper u32 equals the scripts external id.
    catalog_table_id: uint64;
}

table UnresolvedRelationExpression {
    // The name of the table that is referenced
    table_name: QualifiedTableName;
}

union TableReferenceSubType {
    ResolvedRelationExpression,
    UnresolvedRelationExpression
}

table TableReference {
    // The id of the AST node that created this table reference
    ast_node_id: uint32;
    // The id of the statement that contains the table reference
    ast_statement_id: uint32;
    // The root of the scope where this table reference is live
    ast_scope_root: uint32;
    // The location
    location: Location;
    // The alias name
    alias_name: string;
    /// The inner type
    inner: TableReferenceSubType;
}

table ResolvedColumnRefExpression {
    // The column name
    column_name: QualifiedColumnName;
    // The unified database id across all catalog entries
    catalog_database_id: uint32;
    // The unified schema id across all catalog entries
    catalog_schema_id: uint32;
    // The external object id of the table that is referenced.
    // <uint32, uint32> that may point into the catalog.
    catalog_table_id: uint64;
    // The id of the column that is referenced.
    // This is just the index in the resolved table.
    column_id: uint32;
}

table UnresolvedColumnRefExpression {
    // The column name
    column_name: QualifiedColumnName;
}

union ExpressionSubType {
    ResolvedColumnRefExpression,
    UnresolvedColumnRefExpression
}

table Expression {
    // The id of the AST node that created this column reference
    ast_node_id: uint32;
    // The id of the statement that contains the column reference
    ast_statement_id: uint32;
    // The root of the scope where this table reference is live
    ast_scope_root: uint32;
    // The location
    location: Location;
    /// The inner type
    inner: ExpressionSubType;
}

struct IndexedTableReference {
    /// The catalog database id
    catalog_database_id: uint32;
    /// The catalog schema id
    catalog_schema_id: uint32;
    /// The catalog table id
    catalog_table_id: uint64;
    /// The table reference id
    table_reference_id: uint32;
}

struct IndexedColumnReference {
    /// The catalog database id
    catalog_database_id: uint32;
    /// The catalog schema id
    catalog_schema_id: uint32;
    /// The catalog table id
    catalog_table_id: uint64;
    /// The column id
    table_column_id: uint32;
    /// The expression id
    expression_id: uint32;
}

table NameScope {
    /// The scope id
    scope_id: uint32;
    /// The ast node id
    ast_node_id: uint32;
    /// The ast statement id
    ast_statement_id: uint32;
    /// The child scopes
    child_scopes: [uint32];
    /// The column references in this scope
    expressions: [uint32];
    /// The table references in this scope
    table_references: [uint32];
}

enum NameTag: uint8 {
    NONE = 0,
    SCHEMA_NAME = 1,
    DATABASE_NAME = 2,
    TABLE_NAME = 4,
    TABLE_ALIAS = 8,
    COLUMN_NAME = 16,
}

enum AnalyzerErrorType: uint8 {
    COLUMN_REF_AMBIGUOUS,
    DUPLICATE_TABLE_ALIAS,
}

table AnalyzerError {
    /// The error type
    error_type: AnalyzerErrorType;
    /// The ast node id
    ast_node_id: uint32;
    /// The text location, in case the user doesn't want to carry around the ast
    location: Location;
    /// The error message
    message: string;
}

table AnalyzedScript {
    /// The external id that the user specified for this catalog entry
    catalog_entry_id: uint32;

    /// The errors
    errors: [AnalyzerError];

    /// The tables
    tables: [Table];
    /// The table references in the statement
    table_references: [TableReference];
    /// The expressions in the statement.
    /// We're not indexing all expressions here, only those that are relevant for the analysis passes.
    /// (Currently only name resolution)
    expressions: [Expression];

    /// The name scopes
    name_scopes: [NameScope];
    /// The statement root scopes
    statement_root_scopes: [uint32];

    /// The indexed table references, sorted by (database_id, schema_id, table_id)
    table_references_by_id: [IndexedTableReference];
    /// The indexed column references, sorted by (database_id, schema_id, table_id, column_id)
    column_references_by_id: [IndexedColumnReference];
}
