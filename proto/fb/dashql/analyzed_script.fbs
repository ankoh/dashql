include "dashql/parsed_script.fbs";
include "dashql/parsed_script_enums.fbs";
include "dashql/algebra_expressions.fbs";

namespace dashql.buffers.analyzer;

enum SemanticNodeMarkerType: uint8 {
    NONE = 0,
    COLUMN_REFERENCE = 1,
    LITERAL_NULL = 5,
    LITERAL_INTEGER = 6,
    LITERAL_FLOAT = 7,
    LITERAL_STRING = 8,
    LITERAL_INTERVAL = 9,
    CONSTANT_EXPRESSION = 10,
    CONSTANT_EXPRESSION_ROOT = 11,
    COLUMN_TRANSFORM = 12,
    COLUMN_TRANSFORM_ROOT = 13,
    COLUMN_RESTRICTION = 14,
    TABLE_REFERENCE = 15,
    RESULT_TARGET = 16,
}

table DatabaseDeclaration {
    // The unified database id across all catalog entries
    catalog_database_id: uint32;
    // The column name
    database_name: string;
}

table SchemaDeclaration {
    // The unified database id across all catalog entries
    catalog_database_id: uint32;
    // The unified schema id across all catalog entries
    catalog_schema_id: uint32;
    // The schema name
    schema_name: string;
}

table QualifiedTableName {
    // The node id
    ast_node_id: uint32;
    // The name of the database that owns the table (if any)
    database_name: string;
    // The name of the schema that holds the table (if any)
    schema_name: string;
    // The table name, always a table for now
    table_name: string;
}

table QualifiedColumnName {
    // The node id
    ast_node_id: uint32;
    // The table alias, if exists
    table_alias: string;
    // The column name
    column_name: string;
}

table QualifiedFunctionName {
    // The node id
    ast_node_id: uint32;
    // The name of the database that owns the table (if any)
    database_name: string;
    // The name of the schema that holds the table (if any)
    schema_name: string;
    // The function name
    function_name: string;
}

table TableColumn {
    // The id of the AST node that created this column declaration
    ast_node_id: uint32;
    // The name of the column that is referenced
    column_name: string;
}

table Table {
    // The id of the table in the catalog
    catalog_table_id: uint64;
    // The unified database id across all catalog entries
    catalog_database_id: uint32;
    // The unified schema id across all catalog entries
    catalog_schema_id: uint32;
    // The id of the AST node that created this table declaration.
    ast_node_id: uint32 ;
    // The id of the statement that created the table declaration
    ast_statement_id: uint32;
    // The root of the scope where this table reference is live
    ast_scope_root: uint32;
    // The name of the table that is declared by the node
    table_name: QualifiedTableName;
    // The table columns
    table_columns: [TableColumn];
}

table ResolvedTable {
    // The resolved unified database id across all catalog entries
    catalog_database_id: uint32;
    // The resolved unified schema id across all catalog entries
    catalog_schema_id: uint32;
    // The id of the table that is referenced.
    // <uint32, uint32> that may point into the catalog.
    // Referencing a local table only if the upper u32 equals the scripts external id.
    catalog_table_id: uint64;
    /// The referenced catalog version
    referenced_catalog_version: uint32;
    /// The name of the table that is referenced
    table_name: QualifiedTableName;
}

table TableReference {
    // The id of the AST node that created this table reference
    ast_node_id: uint32;
    // The id of the statement that contains the table reference
    ast_statement_id: uint32;
    // The root of the scope where this table reference is live
    ast_scope_root: uint32;
    // The location
    location: parser.Location;
    // The name of the table that is referenced
    table_name: QualifiedTableName;
    // The alias name
    alias_name: string;
    /// The resolved relation
    resolved_table: ResolvedTable;
}

table FunctionReference {
    // The id of the AST node that created this table declaration.
    ast_node_id: uint32 ;
    // The id of the statement that created the table declaration
    ast_statement_id: uint32;
    // The root of the scope where this table reference is live
    ast_scope_root: uint32;
    // The name of the function that is declared by the node
    function_name: QualifiedFunctionName;
}

struct ConstantExpression {
    // The id of the AST node that created this constant expression
    ast_node_id: uint32;
    // The id of the statement that contains this constant expression
    ast_statement_id: uint32;
    // The location
    location: parser.Location;
    /// The restriction expression
    expression_id: uint32;
}

struct ColumnRestriction {
    // The id of the AST node that created this table reference
    ast_node_id: uint32;
    // The id of the statement that contains the table reference
    ast_statement_id: uint32;
    // The location
    location: parser.Location;
    /// The table reference that occurs in the restriction expression
    table_reference_id: uint32;
    /// The restriction expression
    expression_id: uint32;
}

struct ColumnTransform {
    // The id of the AST node that created this table reference
    ast_node_id: uint32;
    // The id of the statement that contains the table reference
    ast_statement_id: uint32;
    // The location
    location: parser.Location;
    /// The reference expression id
    reference_expression_id: uint32;
    /// The projection expression id
    projection_expression_id: uint32;
}

struct IndexedTableReference {
    /// The catalog database id
    catalog_database_id: uint32;
    /// The catalog schema id
    catalog_schema_id: uint32;
    /// The catalog table id
    catalog_table_id: uint64;
    /// The table reference id
    table_reference_id: uint32;
}

struct IndexedColumnReference {
    /// The catalog database id
    catalog_database_id: uint32;
    /// The catalog schema id
    catalog_schema_id: uint32;
    /// The catalog table id
    catalog_table_id: uint64;
    /// The column id
    table_column_id: uint32;
    /// The expression id
    expression_id: uint32;
}

table NameScope {
    /// The scope id
    scope_id: uint32;
    /// The ast node id
    ast_node_id: uint32;
    /// The ast statement id
    ast_statement_id: uint32;
    /// The child scopes
    child_scopes: [uint32];
    /// The column references in this scope
    expressions: [uint32];
    /// The table references in this scope
    table_references: [uint32];
}

enum NameTag: uint8 {
    NONE = 0,
    SCHEMA_NAME = 1,
    DATABASE_NAME = 2,
    TABLE_NAME = 4,
    TABLE_ALIAS = 8,
    COLUMN_NAME = 16,
    FUNCTION_NAME = 32,
}

enum AnalyzerErrorType: uint8 {
    COLUMN_REF_AMBIGUOUS,
    DUPLICATE_TABLE_ALIAS,
}

table AnalyzerError {
    /// The error type
    error_type: AnalyzerErrorType;
    /// The ast node id
    ast_node_id: uint32;
    /// The text location, in case the user doesn't want to carry around the ast
    location: parser.Location;
    /// The error message
    message: string;
}

table AnalyzerWarning {}

table AnalyzedScript {
    /// The external id that the user specified for this catalog entry
    catalog_entry_id: uint32;

    /// The errors
    errors: [AnalyzerError];
    /// The warnings
    warnings: [AnalyzerWarning];

    /// The node markers for every ast node.
    ///
    /// Script markers annotate ast nodes with lightweight semantic tags.
    /// We, for example, remember which ast nodes store a column ref, literals or constant expressions.
    /// These markers are preserved for Script Snippets and can be used in the UI for hints and highlighting.
    node_markers: [SemanticNodeMarkerType];

    /// The tables
    tables: [Table];
    /// The table references
    table_references: [TableReference];
    /// The indexed table references, sorted by (database_id, schema_id, table_id).
    /// This allows resolving table references in logarithmic time using catalog ids.
    table_references_by_id: [IndexedTableReference];

    /// A subset of expressions relevant for the analyzer output
    expressions: [algebra.Expression];
    /// The indexed column references, sorted by (database_id, schema_id, table_id, column_id)
    /// This allows resolving column references in logarithmic time using catalog ids.
    column_references_by_id: [IndexedColumnReference];
    /// The constant expressions.
    /// We track constant expressions in the AST and emit an entry for the expression root.
    constant_expressions: [ConstantExpression];
    /// The column transforms.
    /// We track projections of unaggregated base table columns in otherwise simple constant expressions.
    ///
    /// Examples:
    ///   `<column_ref> + 1`
    ///   `json_value(<column_ref>, <path literal>)`
    ///   `date_trunc('day', <column_ref>)`
    ///   `to_char(<column_ref>, 'format')`
    ///
    column_transforms: [ColumnTransform];
    /// The column restrictions.
    /// We only track restrictions where single table columns are compared with simple constant expressions.
    ///
    /// Examples:
    ///   `<table_ref> = <simple constant expression>`
    ///   `<table_ref> != <simple constant expression>`
    ///
    column_restrictions: [ColumnRestriction];

    /// The name scopes
    name_scopes: [NameScope];
    /// The statement root scopes
    statement_root_scopes: [uint32];

    // The function references
    function_references: [FunctionReference];
}
