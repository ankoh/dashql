namespace dashql.buffers.view;

table PlanViewModel {
    /// The string dictionary allows us to implement most view model types as flat structs.
    /// We do this to simplify the renderer logic.
    string_dictionary: [string];
    /// The pipelines
    stages: [PlanStage];
    /// The pipelines
    pipelines: [PlanPipeline];
    /// The pipeline operators
    pipeline_operators: [uint32];
    /// The plan operators
    operators: [PlanOperator];
    /// The pipelines per operator
    operator_pipelines: [PlanOperatorPipeline];
    /// The plan edges
    operator_edges: [PlanOperatorEdge];
    /// The plan cross edges
    operator_cross_edges: [PlanOperatorCrossEdge];
    /// The plan attributes
    attributes: [PlanAttribute];
    /// The layout info
    layout: PlanLayoutInfo;
}

struct PlanExecutionStatistics {
    /// The time when the target started in milliseconds since epoch
    started_at: uint64;
    /// The time when the target failed in milliseconds since epoch
    failed_at: uint64;
    /// The time when the target finished in milliseconds since epoch
    finished_at: uint64;

    /// The estimated input cardinality
    input_cardinality_estimated: uint64;
    /// The cardinality that has been consumed already
    input_cardinality_consumed: uint64;
    /// The estimated input cardinality
    output_cardinality_estimated: uint64;
    /// The cardinality that has been produced already
    output_cardinality_produced: uint64;
}

struct PlanStage {
    /// The stage id
    stage_id: uint32;
    /// The execution statistics
    statistics: PlanExecutionStatistics;
    /// The begin of the attributes
    attributes_begin: uint32;
    /// The number of attributes
    attribute_count: uint32;
}

struct PlanPipeline {
    /// The stage id
    stage_id: uint32;
    /// The pipeline id
    pipeline_id: uint32;
    /// The execution statistics
    statistics: PlanExecutionStatistics;
    /// The operators begin
    operators_begin: uint32;
    /// The operator count
    operator_count: uint32;
    /// The begin of the attributes
    attributes_begin: uint32;
    /// The number of attributes
    attribute_count: uint32;
}

struct PlanLayoutInfo {
    /// The x position of the box
    x: uint32;
    /// The y position of the box
    y: uint32;
    /// The width of the box
    width: uint32;
    /// The height of the box
    height: uint32;
}

struct PlanOperator {
    /// The stage id
    stage_id: uint32;
    /// The operator id.
    /// May differ from the operator index.
    operator_id: uint32;
    /// The operator name
    operator_type_name: uint32;

    /// The begin of the child operators
    children_begin: uint32;
    /// The number of child operators
    children_count: uint32;
    /// The begin of the cross edges from operators
    cross_edges_begin: uint32;
    /// The number of cross edges
    cross_edge_count: uint32;
    /// The output pipeline id
    pipelines_begin: uint32;
    /// The pipeline count
    pipeline_count: uint32;
    /// The begin of the attributes
    attributes_begin: uint32;
    /// The number of attributes
    attribute_count: uint32;

    /// The execution statistics
    statistics: PlanExecutionStatistics;
    /// The layout info
    layout: PlanLayoutInfo;
}

enum PlanPipelineOperatorBehavior: uint8 {
    NONE = 0,
    SOURCE = 1,
    BREAKER = 2,
}

struct PlanOperatorPipeline {
    /// The operator id.
    operator_id: uint32;
    /// The pipeline id
    pipeline_id: uint32;
    /// How's the operator behaving in the pipeline
    behavior: PlanPipelineOperatorBehavior;
}

struct PlanAttribute {
    /// The attribute id
    attribute_id: uint32;
    /// The name
    name: uint32;
    /// The string id of additional attributes as json
    value_json: uint32;
}

struct PlanOperatorEdge {
    /// The cross edge id
    edge_id: uint64;
    /// The source node
    source_node: uint32;
    /// The target node
    target_node: uint32;
    /// The pipeline id
    pipeline_id: uint32;
    /// The begin of the attributes
    attributes_begin: uint32;
    /// The number of attributes
    attribute_count: uint32;
    /// The execution statistics
    statistics: PlanExecutionStatistics;
}

struct PlanOperatorCrossEdge {
    /// The cross edge id
    edge_id: uint64;
    /// The source node
    source_node: uint32;
    /// The target node
    target_node: uint32;
    /// The pipeline id
    pipeline_id: uint32;
    /// The begin of the attributes
    attributes_begin: uint32;
    /// The number of attributes
    attribute_count: uint32;
    /// The execution statistics
    statistics: PlanExecutionStatistics;
}


/// A change event to update stage statistics
table UpdateStageStatisticsEvent {
    /// The event time
    event_time: uint64;
    /// The stage id
    stage_id: uint32;
    /// The new statistics
    statistics: PlanExecutionStatistics;
}
/// A change event to update pipeline statistics
table UpdatePipelineStatisticsEvent {
    /// The event time
    event_time: uint64;
    /// The pipeline id
    pipeline_id: uint32;
    /// The new statistics
    statistics: PlanExecutionStatistics;
}
/// A change event to update operator statistics
table UpdateOperatorStatisticsEvent {
    /// The event time
    event_time: uint64;
    /// The operator id
    operator_id: uint32;
    /// The new statistics
    statistics: PlanExecutionStatistics;
}
/// A change event to update edge statistics
table UpdateOperatorEdgeStatisticsEvent {
    /// The event time
    event_time: uint64;
    /// The edge id
    operator_edge_id: uint64;
    /// The new statistics
    statistics: PlanExecutionStatistics;
}
/// A change event to update cross-edge statistics
table UpdateOperatorCrossEdgeStatisticsEvent {
    /// The event time
    event_time: uint64;
    /// The edge id
    operator_cross_edge_id: uint64;
    /// The new statistics
    statistics: PlanExecutionStatistics;
}

union PlanChangeEvent {
    UpdateStageStatisticsEvent,
    UpdatePipelineStatisticsEvent,
    UpdateOperatorStatisticsEvent,
    UpdateOperatorEdgeStatisticsEvent,
    UpdateOperatorCrossEdgeStatisticsEvent,
}

/// A set of change events
table PlanChangeEvents {
    events: [PlanChangeEvent];
}
