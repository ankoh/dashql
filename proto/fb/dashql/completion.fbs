include "dashql/parsed_script.fbs";
include "dashql/script_snippet.fbs";

namespace dashql.buffers.completion;

enum CompletionCandidateObjectType: uint8 {
    NONE = 0,
    DATABASE = 1,
    SCHEMA = 2,
    TABLE = 3,
    COLUMN = 4
}

table CompletionCandidateObject {
    /// The object type
    object_type: CompletionCandidateObjectType;
    /// The database id (unique in catalog)
    catalog_database_id: uint32;
    /// The schema id (unique in catalog)
    catalog_schema_id: uint32;
    /// The table id (unique in catalog)
    catalog_table_id: uint64;
    /// The column idx
    table_column_id: uint32;
    /// The referenced catalog version of this particular candidate.
    /// Note that this is not the *global* catalog version but the version of this particular catalog entry.
    ///
    /// Example:
    ///   Assume a schema script in the catalog exists in versions 1, 2.
    ///   Scripts now resolve column refs against this schema script in versions 1 and 2.
    ///   When searching in the script registry for column refs, we compare this catalog version with the version
    ///   found through the registry. If it differs, we know the registry ref is outdated and can ignore it.
    ///   (Without, we would end up returning column restrictions for unrelated columns)
    ///
    referenced_catalog_version: uint32;
    /// The candidate tags
    candidate_tags: uint32;
    /// The candidate score
    score: uint32;
    /// The qualified name (if any).
    /// Quoted if characters are not all-lowercase.
    qualified_name: [string];
}

enum CandidateTag: uint32 {
    NONE = 0,
    KEYWORD_DEFAULT = 1,
    KEYWORD_POPULAR = 2,
    KEYWORD_VERY_POPULAR = 4,
    EXPECTED_PARSER_SYMBOL = 8,
    NAME_INDEX = 16,
    DOT_RESOLUTION_DATABASE = 32,
    DOT_RESOLUTION_SCHEMA = 64,
    DOT_RESOLUTION_TABLE = 128,
    DOT_RESOLUTION_COLUMN = 256,
    PREFIX_MATCH = 512,
    SUBSTRING_MATCH = 1024,
    RESOLVING_TABLE = 2048,
    UNRESOLVED_PEER = 4096,
    THROUGH_CATALOG = 8192,
    IN_NAME_SCOPE = 16384,
    IN_SAME_STATEMENT = 32768,
    IN_SAME_SCRIPT = 65536,
    IN_OTHER_SCRIPT = 131072,
}

table CompletionCandidate {
    /// The fine-granular candidate tags
    candidate_tags: uint32;
    /// The coarse-granular analyzer tags
    name_tags: uint8;
    /// The text to replace
    target_location: parser.Location;
    /// The qualified text to replace
    target_location_qualified: parser.Location;
    /// The display text
    display_text: string;
    /// The completion text (simple).
    /// Quoted if characters are not all-lowercase.
    completion_text: string;
    /// The completion templates (extended)
    completion_templates: [snippet.ScriptTemplate];
    /// The objects that this candidate references
    catalog_objects: [CompletionCandidateObject];
    /// The score
    score: uint32;
}

enum CompletionStrategy: uint8 {
    DEFAULT,
    TABLE_REF,
    COLUMN_REF
}

table Completion {
    /// The cursor offset
    cursor_offset: uint32;
    /// The strategy
    strategy: CompletionStrategy;
    /// Are we dot-completing?
    /// That will disable inline hints for auto-qualification.
    dot_completion: bool;
    /// The completion candidates
    candidates: [CompletionCandidate];
}
