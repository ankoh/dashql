include "dashql/parsed_script.fbs";
include "dashql/parsed_script_enums.fbs";

namespace dashql.buffers.algebra;

enum LiteralType: uint8 {
    NULL_ = 0,
    INTEGER = 1,
    FLOAT = 2,
    STRING = 3,
    INTERVAL = 4,
}

table Literal {
    /// The literal type
    literal_type: LiteralType;
    /// The raw value as it was written in the text
    raw_value: string;
}

enum UnaryFunction: uint8 {
    UNKNOWN = 0,
    NOT = 1,
}

table UnaryExpression {
    /// The unary function
    func: UnaryFunction;
    /// The unary expression
    input: uint32;
}

enum BinaryExpressionFunction: uint8 {
    UNKNOWN = 0,
    PLUS = 1,
    MINUS = 2,
    MULTIPLY = 4,
    DIVIDE = 5,
    MODULUS = 6,
    XOR = 7,
}

table BinaryExpression {
    /// The binary function
    func: BinaryExpressionFunction;
    /// The left child
    left_child: uint32;
    /// The right child
    right_child: uint32;
}

enum ComparisonFunction: uint8 {
    UNKNOWN = 0,
    EQUAL = 1,
    NOT_EQUAL = 2,
    LESS_THAN = 3,
    LESS_EQUAL = 4,
    GREATER_THAN = 5,
    GREATER_EQUAL = 6,
}

table Comparison {
    /// The comparison function
    func: ComparisonFunction;
    /// The left child
    left_child: uint32;
    /// The right child
    right_child: uint32;
    /// Is the comparison constant?
    is_constant: bool;
    /// Is this comparison a restriction?
    is_restriction: bool;
    /// Is the restriction target left?
    restriction_target_left: bool;
}


enum NaryExpressionFunction: uint8 {
    AND = 0,
    OR = 1,
}

table NaryExpression {
    /// The expression function
    func: NaryExpressionFunction;
    /// The children
    children: [uint32];
    /// Is the comparison constant?
    is_constant: bool;
}

enum FunctionCallModifier: uint8 {
    NONE = 0,
    ARGS_STAR = 1,
    ARGS_ALL = 2,
    ARGS_DISTINCT = 4,
    VARIADIC = 8,
    OVER = 16,
    WITHIN_GROUP = 32,
}

table FunctionCallExpression {
    /// The function name
    func_name: QualifiedFunctionName;
    /// The fucntion modifier bits
    func_call_modifiers: uint8;
    /// The arguments
    arguments: [uint32];
}

table ResolvedColumn {
    // The unified database id across all catalog entries
    catalog_database_id: uint32;
    // The unified schema id across all catalog entries
    catalog_schema_id: uint32;
    // The external object id of the table that is referenced.
    // <uint32, uint32> that may point into the catalog.
    catalog_table_id: uint64;
    // The id of the column that is referenced.
    // This is just the index in the resolved table.
    column_id: uint32;
}

table ColumnRefExpression {
    // The root of the scope where this expression lives
    ast_scope_root: uint32;
    // The column name
    column_name: QualifiedColumnName;
    // The resolved column
    resolved_column: ResolvedColumn;
}

union ExpressionSubType {
    ColumnRefExpression,
    Literal,
    UnaryExpression,
    BinaryExpression,
    NaryExpression,
    Comparison,
    FunctionCallExpression
}

table Expression {
    // The id of the AST node that created this expression
    ast_node_id: uint32;
    // The id of the statement that contains the expression
    ast_statement_id: uint32;
    // The location
    location: parser.Location;
    /// The inner type
    inner: ExpressionSubType;
    /// Is the expression constant?
    is_constexpr: bool;
    /// Is a column transform?
    is_column_transform: bool;
    /// Is a column restriction?
    is_column_restriction: bool;
    /// The expression id of the (immediate) transform target
    column_transform_target_id: uint32;
    /// The expression id of the (immedate) restriction target
    column_restriction_target_id: uint32;
}
