syntax = "proto3";

package sqlynx.compute;

message OrderByConstraint {
    /// The field name
    string field_name = 1;
    /// Sort ascending?
    bool ascending = 2;
    /// Sort nulls first?
    bool nulls_first = 3;
}

message OrderByTransform {
    /// The field name
    repeated OrderByConstraint constraints = 1;
    /// Limit results?
    optional uint32 limit = 2;
}

enum AggregationFunction {
    Min = 0;
    Max = 1;
    Average = 2;
    Count = 3;
    CountStar = 4;
}

/// The key binning.
/// Bins are computed as: (data[field_name] - stats[stats_minimum_field_name]) / stats[stats_bin_width_field_name])
message GroupByKeyBinning {
    /// The field containing the precomputed minimum of the field
    string stats_minimum_field_name = 1;
    /// The field containing the precomputed maximum of the field
    string stats_maximum_field_name = 2;
    /// The number of bins
    uint32 bin_count = 3;
    /// The output bin minimum field name
    string output_bin_lb_alias = 4;
    /// The output bin minimum field name
    string output_bin_ub_alias = 5;
    /// The output bin width field name
    string output_bin_width_alias = 6;
}

message GroupByKey {
    /// The field name
    string field_name = 1;
    /// The output alias
    string output_alias = 2;
    /// The field binning
    optional GroupByKeyBinning binning = 3;
    /// Instead of grouping by the value, we're grouping by the value lengths (list & string)
    optional bool group_lengths = 4;
}

message GroupByAggregate {
    /// The field name
    optional string field_name = 1;
    /// The output alias
    string output_alias = 2;
    /// The aggregation function
    AggregationFunction aggregation_function = 3;
    /// Aggregate distinct values?
    optional bool aggregate_distinct = 4;
    /// Instead of aggregating the value, we're aggregating the value lengths (list & string)
    optional bool aggregate_lengths = 5;
}

message GroupByTransform {
    /// The group by keys
    repeated GroupByKey keys = 1;
    /// The aggregates
    repeated GroupByAggregate aggregates = 2;
}

message FilterByBinRangeTransform {
    /// The field containing the precomputed minimum of the field
    string stats_minimum_field_name = 1;
    /// The field containing the precomputed maximum of the field
    string stats_maximum_field_name = 2;
    /// The number of bins
    uint32 bin_count = 3;
    /// The begin of the range
    double range_begin = 4;
    /// The end of the range
    double range_end = 5;
}

message DataFrameTransform {
    /// The group by transform (if any)
    optional GroupByTransform group_by = 1;
    /// The order by transform (if any)
    optional OrderByTransform order_by = 2;
    /// The filtering transform (if any)
    optional FilterByBinRangeTransform filter_by_bin_range = 3;
}
