syntax = "proto3";

package sqlynx.compute;

/// Bins are computed as: `(data[field_name] - stats[stats_minimum_field_name]) / stats[stats_bin_width_field_name])`
/// Requires precomputed min/max statistics of the field `field_name`.
message BinFieldTransform {
    /// The field name
    string field_name = 1;
    /// The field containing the precomputed minimum of the field
    string stats_minimum_field_name = 2;
    /// The field containing the precomputed maximum of the field
    string stats_maximum_field_name = 3;
    /// The number of bins
    uint32 bin_count = 4;
    /// The output alias
    string output_alias = 5;
}

/// Filters the data frame by a bin range.
/// `bin_field_name` should be computed using the `BinFieldTransform`
message FilterBinRangeTransform {
    /// The field name
    string bin_field_name = 1;
    /// The begin of the range
    double range_begin = 2;
    /// The end of the range
    double range_end = 3;
}

/// An ordering constraint
message OrderByConstraint {
    /// The field name
    string field_name = 1;
    /// Sort ascending?
    bool ascending = 2;
    /// Sort nulls first?
    bool nulls_first = 3;
}

/// Order a data frame by constraints
message OrderByTransform {
    /// The field name
    repeated OrderByConstraint constraints = 1;
    /// Limit results?
    optional uint32 limit = 2;
}

/// An aggregate function
enum AggregationFunction {
    Min = 0;
    Max = 1;
    Average = 2;
    Count = 3;
    CountStar = 4;
}

/// The binning metadata.
/// Requires precomputed min/max statistics.
message GroupByKeyBinning {
    /// The pre-binned field name.
    optional string pre_binned_field_name = 1;
    /// The number of bins
    uint32 bin_count = 2;
    /// The field containing the precomputed minimum of the field
    string stats_minimum_field_name = 3;
    /// The field containing the precomputed maximum of the field
    string stats_maximum_field_name = 4;
    /// The output bin minimum field name
    string output_bin_lb_alias = 5;
    /// The output bin minimum field name
    string output_bin_ub_alias = 6;
    /// The output bin width field name
    string output_bin_width_alias = 7;
}

message GroupByKey {
    /// The field name
    string field_name = 1;
    /// The output alias
    string output_alias = 2;
    /// The binning of the grouping key
    optional GroupByKeyBinning binning = 3;
}

message GroupByAggregate {
    /// The field name
    optional string field_name = 1;
    /// The output alias
    string output_alias = 2;
    /// The aggregation function
    AggregationFunction aggregation_function = 3;
    /// Aggregate distinct values?
    optional bool aggregate_distinct = 4;
}

message GroupByTransform {
    /// The group by keys
    repeated GroupByKey keys = 1;
    /// The aggregates
    repeated GroupByAggregate aggregates = 2;
}

message DataFrameTransform {
    /// The binning transform (if any)
    optional BinFieldTransform bin_fields = 1;
    /// The filtering transform (if any)
    optional FilterBinRangeTransform filter_bin_range = 2;
    /// The group by transform (if any)
    optional GroupByTransform group_by = 3;
    /// The order by transform (if any)
    optional OrderByTransform order_by = 4;
}
