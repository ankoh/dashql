include "flatsql/sql_enums.fbs";

namespace flatsql.proto;

struct QualifiedTableName {
    // The node id
    ast_node_id: uint32;
    // The name of the database that owns the table 
    database_name: uint64;
    // The name of the schema that holds the table
    schema_name: uint64;
    // The table name, always a table for now
    table_name: uint64;
}

struct QualifiedColumnName {
    // The node id
    ast_node_id: uint32;
    // The table alias, if exists
    table_alias: uint64;
    // The column name
    column_name: uint64;
}

struct TableColumn {
    // The id of the AST node that created this column declaration
    ast_node_id: uint32;
    // The name of the column that is referenced
    column_name: uint64;
}

struct Table {
    // The id of the AST node that created this table declaration.
    ast_node_id: uint32;
    // The id of the statement that created the table declaration
    ast_statement_id: uint32;
    // The root of the scope where this table reference is live
    ast_scope_root: uint32;
    // The name of the table that is declared by the node
    table_name: QualifiedTableName;
    /// The table colummns
    columns_begin: uint32;
    /// The table colummns
    column_count: uint32;
}

struct TableReference {
    // The id of the AST node that created this table reference
    ast_node_id: uint32;
    // The id of the statement that contains the table reference
    ast_statement_id: uint32;
    // The root of the scope where this table reference is live
    ast_scope_root: uint32;
    // The name of the table that is referenced
    table_name: QualifiedTableName;
    // The alias name
    alias_name: uint64;
    // The id of the table that is referenced
    table_id: uint64;
}

struct ColumnReference {
    // The id of the AST node that created this column reference
    ast_node_id: uint32;
    // The id of the statement that contains the column reference
    ast_statement_id: uint32;
    // The root of the scope where this table reference is live
    ast_scope_root: uint32;
    // The column name
    column_name: QualifiedColumnName;
    // The id of the table that is referenced
    table_id: uint64;
    // The id of the column that is referenced
    column_id: uint32;
}

struct QueryGraphEdge {
    /// The id of the AST node that created this graph node
    ast_node_id: uint32;
    /// The begin of the nodes
    nodes_begin: uint32;
    /// The number of nodes on the left side
    node_count_left: uint16;
    /// The set id of nodes on the right side
    node_count_right: uint16;
    /// The expression operator
    expression_operator: ExpressionOperator;
}

struct QueryGraphEdgeNode {
    /// The id of the column reference
    column_reference_id: uint32;
}

table AnalyzedScript {
    // The script id
    script_id: uint32;
    // The local tables
    tables: [Table];
    // The local table columns
    table_columns: [TableColumn];
    // The table references in the statement
    table_references: [TableReference];
    // The column references in the statement
    column_references: [ColumnReference];
    /// The query graph edges
    graph_edges: [QueryGraphEdge];
    /// The query graph edge nodes
    graph_edge_nodes: [QueryGraphEdgeNode];
}
